name: Test deploy

on:
  workflow_run:
    workflows: [Release]
    types: [completed]

jobs:
  check-success:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion != 'success' }}
    steps:
      - run: echo 1

  get-repo-version:
    name: 'Get repo version'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.VERSION }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Fetch all tags
        run: |
          git fetch --tags

      - name: Get latest semver tag
        id: get-version
        run: |
          VERSION=$(git tag -l | sort -V | tail -n 1)
          
          VERSION="${VERSION#v}"
          
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Latest tag version: $VERSION"

  get-deployed-version:
    name: 'Get deployed version'
    runs-on: ubuntu-latest
    needs: get-repo-version
    outputs:
      deployed_version: ${{ steps.check.outputs.DEPLOYED_VERSION }}
    steps:
      - name: Wait for deployed version to match
        id: check
        env:
          BASE_URL: ${{ secrets.DEPLOYED_BASE_URL }}
        run: |
          EXPECTED_VERSION="${{ needs.get-repo-version.outputs.version }}"
          echo "Waiting for deployed version to match: $EXPECTED_VERSION"
          for i in {1..60}; do
            RESPONSE=$(curl -s "$BASE_URL/api/health")
            DEPLOYED_VERSION=$(echo "$RESPONSE" | jq -r '.version')

            echo "Attempt $i: Deployed version is $DEPLOYED_VERSION"

            if [ "$DEPLOYED_VERSION" == "$EXPECTED_VERSION" ]; then
              echo "Deployed"
              echo "DEPLOYED_VERSION=$DEPLOYED_VERSION" >> $GITHUB_OUTPUT
              exit 0
            fi

            echo "No match. Waiting 60 seconds..."
            sleep 60
          done

          echo "Timed out after 60 minutes. Deployed version did not match expected version."
          exit 1

  deployed:
    runs-on: ubuntu-latest
    needs: [get-repo-version, get-deployed-version]
    if: needs.get-deployed-version.outputs.deployed_version == needs.get-repo-version.outputs.version
    steps:
      - name: Print versions
        run: |
          echo "Latest tag version: ${{ needs.get-repo-version.outputs.version }}"
          echo "Deployed version: ${{ needs.get-deployed-version.outputs.deployed_version }}"
      
      - name: Success
        run: echo "Success - versions match"